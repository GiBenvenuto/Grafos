/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * View.java
 *
 * Created on 09/05/2012, 14:57:16
 */
package Desenho;

import Cores.EscalaCores;
import Metodos.Grafo;
import Metodos.Matriz;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Gigi e Gugu
 */
public class View extends javax.swing.JFrame {

    /** Creates new form View */
    public View() {
        this.view = new ViewPanel();
        //this.view.setGraph(this.graph);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane(this.view);
        jMenuBar1 = new javax.swing.JMenuBar();
        opcoes_Menu = new javax.swing.JMenu();
        carregarGrafo_Menu = new javax.swing.JMenuItem();
        salvarImagem_Menu = new javax.swing.JMenuItem();
        algoritmos_Menu = new javax.swing.JMenu();
        componentesConexas_Menu = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        AGM = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        opcoes_Menu.setText("Opções");

        carregarGrafo_Menu.setText("Carregar Grafo");
        carregarGrafo_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carregarGrafo_MenuActionPerformed(evt);
            }
        });
        opcoes_Menu.add(carregarGrafo_Menu);

        salvarImagem_Menu.setText("Salvar Imagem");
        salvarImagem_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarImagem_MenuActionPerformed(evt);
            }
        });
        opcoes_Menu.add(salvarImagem_Menu);

        jMenuBar1.add(opcoes_Menu);

        algoritmos_Menu.setText("Algoritmos");

        componentesConexas_Menu.setText("Marcar Componentes Conexas");
        componentesConexas_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentesConexas_MenuActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(componentesConexas_Menu);

        jMenuItem1.setText("Coloração");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(jMenuItem1);

        AGM.setText("Árvore Geradora Mínima");
        AGM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AGMActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(AGM);

        jMenuBar1.add(algoritmos_Menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void carregarGrafo_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carregarGrafo_MenuActionPerformed
        int qtdvertices, est;
        boolean estrutura;
        JFileChooser fc = new JFileChooser("C:\\Users\\Gi Benvenuto\\Desktop\\Desktop\\BCC\\5°SEMESTRE\\Grafos\\Trabalho Prático - 02");
        int result;
        result = fc.showOpenDialog(null);
        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            String filename = fc.getSelectedFile().getAbsolutePath();
            BufferedReader in = null;

            try {
            in = new BufferedReader(new FileReader(filename));
                                
            est = Integer.parseInt(in.readLine());//Se é dígrafo ou grafo
            qtdvertices = Integer.parseInt(in.readLine());

            if (est == 1) {
                estrutura = false; //dígrafo
            } else {
                estrutura = true; //grafo
            }
            
            this.g = new Grafo(new Matriz(), qtdvertices, estrutura); //Matriz
            
                
            this.graph = new Grafos(qtdvertices);
            
                //leitura das arestas
                String line;
                while ((line = in.readLine()) != null && line.trim().length() > 0) {
                    StringTokenizer t1 = new StringTokenizer(line, " ");
                    int vIni = Integer.parseInt(t1.nextToken().trim()); //verticeInicial
                    int vFim = Integer.parseInt(t1.nextToken().trim()); //verticeFinal
                    int valor = Integer.parseInt(t1.nextToken().trim());//Valor
                    
                    Vertices vS = this.graph.getVertex().get(vIni);
                    vS.setID(vIni);
                    Vertices vT = this.graph.getVertex().get(vFim);
                    vT.setID(vFim);
                    this.g.addAdjacencia(vFim, vFim, valor); //estrutura de dados
                    Arestas a = new Arestas(vS, vT, valor); //desenho
                    //Exemplo de seleção de aresta
                    if (vIni % 2 == 0){
                      //  e.setSelected(true);                        
                    }
                    
                    this.graph.addEdge(a);    //desenho

                }  //se tiver peso nas arestas, adicionar mais uma leitura de token

                this.view.setGraph(graph);

            } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                //fechar o arquivo
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException ex) {
                        Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_carregarGrafo_MenuActionPerformed

    private void salvarImagem_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarImagem_MenuActionPerformed
        // TODO add your handling code here:
        JFileChooser dialog = new JFileChooser();
        dialog.setMultiSelectionEnabled(false);
        dialog.setDialogTitle("Save file");
        dialog.setCurrentDirectory(new File("D:\\DANILO\\UNESP\\2017\\Aulas\\Grafos"));
        int result = dialog.showDialog(this, "Salvar");
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                String filename = dialog.getSelectedFile().getAbsolutePath();
                this.view.saveToPngImageFile(filename);
            } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_salvarImagem_MenuActionPerformed

    private void componentesConexas_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentesConexas_MenuActionPerformed
        // TODO add your handling code here:
        
//        ComponentesConexas componentesConexas = new ComponentesConexas();
//        componentesConexas.execute(grafo);
//        int comp[] = componentesConexas.getComponentes();
//        int numComp = componentesConexas.getNumComponentes();
//        int compStep = 255 / numComp;
//        RainbowScale rbS = new RainbowScale();
//        for (int i = 0; i < comp.length; i++) {
//            System.out.println("Vertice: " + i + " Compoente: " + comp[i]);
//            this.graph.getVertex().get(i).setColor(rbS.getColor(comp[i] * compStep));
//        }
//        this.view.cleanImage();
//        this.view.repaint();
    }//GEN-LAST:event_componentesConexas_MenuActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
//        Coloracao coloracao = new Coloracao();
//        coloracao.execute(grafo);
//        int cores[] = coloracao.getCores();
//        int nCores = coloracao.getNumCores();
//        
//        int coresStep = 255 / nCores;
//        RainbowScale rbS = new RainbowScale();
//        //GrayScale gs = new GrayScale();
//        for (int i = 0; i < cores.length; i++) {
//            System.out.println("Vertice: " + i + " Cor: " + cores[i]);
//            this.graph.getVertex().get(i).setColor(rbS.getColor(cores[i] * coresStep));
//            //this.graph.getVertex().get(i).setColor(gs.getColor(cores[i] * coresStep));
//        }
//        this.view.cleanImage();
//        this.view.repaint();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void AGMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AGMActionPerformed
        
        int i = 0;
        int maux[][] = this.g.AGM_Prim(0);
        Arestas a;
        
        while (!this.graph.getAresta().isEmpty())
        this.graph.getAresta().remove(0);
       
        for (; i< maux.length; i++){
            if (maux[i][2] != Integer.MAX_VALUE){
            a = new Arestas(this.graph.getVertex().get(i), this.graph.getVertex().get(maux[i][2]), 0);
            a.setSelected(true);
            this.graph.addEdge(a);
            
            }
            
        }
       
           
 
        this.view.cleanImage();
        this.view.setGraph(graph);

        this.view.repaint();
    }//GEN-LAST:event_AGMActionPerformed

    public class ViewPanel extends JPanel {

        public ViewPanel() {
            this.setBackground(java.awt.Color.WHITE);
            this.setLayout(new FlowLayout(FlowLayout.LEFT));
        }

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);

            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;
            ////configuração do rendering para obeter melhor qualidade
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);

            if (graph != null && this.imageBuffer == null) {
                this.imageBuffer = new BufferedImage(graph.getSize().width + 1,
                        graph.getSize().height + 1, BufferedImage.TYPE_INT_RGB);

                java.awt.Graphics2D g2Buffer = this.imageBuffer.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, graph.getSize().width + 1, graph.getSize().height + 1);

                g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                graph.draw(g2Buffer);
                g2Buffer.dispose();
            }

            if (this.imageBuffer != null) {
                g2.drawImage(this.imageBuffer, 0, 0, null);
            }
        }

        public void saveToPngImageFile(String filename) throws IOException {
            try {
                //this.paint(this.imageBuffer.getGraphics());
                ImageIO.write(this.imageBuffer, "png", new File(filename));
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }

        public void setGraph(Grafos graph) {
            if (graph != null) {
                this.setPreferredSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));
                this.setSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));

                this.cleanImage();
                this.repaint();
            }
        }

        public Vertices getMarkedVertex() {
            return markedVertex;
        }

        public void cleanImage() {
            this.imageBuffer = null;
        }

        public void adjustPanel() {
            float iniX = graph.getVertex().get(0).getX();
            float iniY = graph.getVertex().get(0).getY();
            float max_x = iniX, max_y = iniX;
            float min_x = iniY, min_y = iniY;
            int zero = graph.getVertex().get(0).getRay() * 5 + 10;

            for (int i = 1; i < graph.getVertex().size(); i++) {
                float x = graph.getVertex().get(i).getX();
                if (max_x < x) {
                    max_x = x;
                } else if (min_x > x) {
                    min_x = x;
                }

                float y = graph.getVertex().get(i).getY();
                if (max_y < y) {
                    max_y = y;
                } else if (min_y > y) {
                    min_y = y;
                }
            }

            for (Vertices v : graph.getVertex()) {
                v.setX(v.getX() + zero - min_x);
                v.setY(v.getY() + zero - min_y);
            }

            Dimension d = this.getSize();
            d.width = (int) max_x + zero;
            d.height = (int) max_y + zero;
            this.setSize(d);
            this.setPreferredSize(d);
        }

        public void markVertices(ArrayList<Vertices> vertices) {
            if (vertices != null) {
                this.cleanMarkedVertices(false);

                //change the vertices' colors
                for (Vertices v : vertices) {
                    v.setSelected(true);
                }

                this.cleanImage();
                this.repaint();
            }
        }

        public void cleanMarkedVertices(boolean cleanVertex) {
            if (graph != null) {
                this.markedVertex = null;

                for (Vertices vertex : graph.getVertex()) {
                    vertex.setSelected(false);

                }
            }

            this.cleanImage();
            this.repaint();
        }

        @Override
        public void setFont(java.awt.Font font) {
            //
        }

        @Override
        public java.awt.Font getFont() {
            return null;// colocar alguma fonte
        }

        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);

        }
        private java.awt.Color color = java.awt.Color.RED;
        //Used to color based on a document
        private Vertices markedVertex;
        //Used to move the points
        private Vertices selectedVertex;
        //contain the selected vertices which will be moved
        private ArrayList<Vertices> selectedVertices;
        //The image which will be drawn as a graph
        private BufferedImage imageBuffer;
    }
    private ViewPanel view;
    private Grafos graph;
    private Grafo g;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AGM;
    private javax.swing.JMenu algoritmos_Menu;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem carregarGrafo_Menu;
    private javax.swing.JMenuItem componentesConexas_Menu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu opcoes_Menu;
    private javax.swing.JMenuItem salvarImagem_Menu;
    // End of variables declaration//GEN-END:variables
}
